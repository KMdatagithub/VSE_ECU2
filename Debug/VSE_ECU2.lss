
VSE_ECU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00000cb0  00000d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  008000d8  008000d8  00000dbc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021fa  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a1  00000000  00000000  0000325e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ed  00000000  00000000  000039ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f0  00000000  00000000  000040ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e0f  00000000  00000000  000046dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000187d  00000000  00000000  000054eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3d       	cpi	r26, 0xD8	; 216
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 ed       	ldi	r26, 0xD8	; 216
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 31       	cpi	r26, 0x11	; 17
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  8a:	0c 94 56 06 	jmp	0xcac	; 0xcac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPinDirection>:
   return Port_State;
}

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
   if(u8_direction == OUTPUT)
  92:	4f 3f       	cpi	r20, 0xFF	; 255
  94:	c1 f4       	brne	.+48     	; 0xc6 <gpioPinDirection+0x34>
   {
	 switch(u8_port)
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	51 f0       	breq	.+20     	; 0xae <gpioPinDirection+0x1c>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <gpioPinDirection+0x14>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	59 f0       	breq	.+22     	; 0xb6 <gpioPinDirection+0x24>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	69 f0       	breq	.+26     	; 0xbe <gpioPinDirection+0x2c>
  a4:	08 95       	ret
	 {
		case GPIOA:
	            	PORTA_DIR |= (u8_pins);
  a6:	8a b3       	in	r24, 0x1a	; 26
  a8:	68 2b       	or	r22, r24
  aa:	6a bb       	out	0x1a, r22	; 26
		            break;
  ac:	08 95       	ret
		case GPIOB:
		            PORTB_DIR |= (u8_pins);
  ae:	87 b3       	in	r24, 0x17	; 23
  b0:	68 2b       	or	r22, r24
  b2:	67 bb       	out	0x17, r22	; 23
		            break;
  b4:	08 95       	ret
		case GPIOC:
		            PORTC_DIR |= (u8_pins);
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	68 2b       	or	r22, r24
  ba:	64 bb       	out	0x14, r22	; 20
		            break;
  bc:	08 95       	ret
		case GPIOD:
		            PORTD_DIR |= (u8_pins);
  be:	81 b3       	in	r24, 0x11	; 17
  c0:	68 2b       	or	r22, r24
  c2:	61 bb       	out	0x11, r22	; 17
		            break;
  c4:	08 95       	ret
		default:
		            break;
	 }    
   }
   else if(u8_direction == INPUT)
  c6:	41 11       	cpse	r20, r1
  c8:	1b c0       	rjmp	.+54     	; 0x100 <gpioPinDirection+0x6e>
   {
	 switch(u8_port)
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	59 f0       	breq	.+22     	; 0xe4 <gpioPinDirection+0x52>
  ce:	28 f0       	brcs	.+10     	; 0xda <gpioPinDirection+0x48>
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	69 f0       	breq	.+26     	; 0xee <gpioPinDirection+0x5c>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	81 f0       	breq	.+32     	; 0xf8 <gpioPinDirection+0x66>
  d8:	08 95       	ret
     {
		   case GPIOA:
		                PORTA_DIR &= (~u8_pins);
  da:	8a b3       	in	r24, 0x1a	; 26
  dc:	60 95       	com	r22
  de:	68 23       	and	r22, r24
  e0:	6a bb       	out	0x1a, r22	; 26
		                break;
  e2:	08 95       	ret
		   case GPIOB:
		                PORTB_DIR &= (~u8_pins);
  e4:	87 b3       	in	r24, 0x17	; 23
  e6:	60 95       	com	r22
  e8:	68 23       	and	r22, r24
  ea:	67 bb       	out	0x17, r22	; 23
		                break;
  ec:	08 95       	ret
		   case GPIOC:
		                PORTC_DIR &= (~u8_pins);
  ee:	84 b3       	in	r24, 0x14	; 20
  f0:	60 95       	com	r22
  f2:	68 23       	and	r22, r24
  f4:	64 bb       	out	0x14, r22	; 20
		                break;
  f6:	08 95       	ret
		   case GPIOD:
		                PORTD_DIR &= (~u8_pins);
  f8:	81 b3       	in	r24, 0x11	; 17
  fa:	60 95       	com	r22
  fc:	68 23       	and	r22, r24
  fe:	61 bb       	out	0x11, r22	; 17
 100:	08 95       	ret

00000102 <gpioPinToggle>:
	}   
}

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
   switch(u8_port)
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	51 f0       	breq	.+20     	; 0x11a <gpioPinToggle+0x18>
 106:	28 f0       	brcs	.+10     	; 0x112 <gpioPinToggle+0x10>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	59 f0       	breq	.+22     	; 0x122 <gpioPinToggle+0x20>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	69 f0       	breq	.+26     	; 0x12a <gpioPinToggle+0x28>
 110:	08 95       	ret
   {
        case GPIOA:
                     PORTA_DATA ^= (u8_pins);
 112:	8b b3       	in	r24, 0x1b	; 27
 114:	68 27       	eor	r22, r24
 116:	6b bb       	out	0x1b, r22	; 27
					 break;
 118:	08 95       	ret
	    case GPIOB:
		             PORTB_DATA ^= (u8_pins);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	68 27       	eor	r22, r24
 11e:	68 bb       	out	0x18, r22	; 24
		             break;		
 120:	08 95       	ret
	    case GPIOC:
		             PORTC_DATA ^= (u8_pins);
 122:	85 b3       	in	r24, 0x15	; 21
 124:	68 27       	eor	r22, r24
 126:	65 bb       	out	0x15, r22	; 21
		             break;	 
 128:	08 95       	ret
        case GPIOD:
			         PORTD_DATA ^= (u8_pins);
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	68 27       	eor	r22, r24
 12e:	62 bb       	out	0x12, r22	; 18
 130:	08 95       	ret

00000132 <gpioPinRead>:
}

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
   uint8_t Ret_State = 0x00;
   switch(u8_port)
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	49 f0       	breq	.+18     	; 0x148 <gpioPinRead+0x16>
 136:	28 f0       	brcs	.+10     	; 0x142 <gpioPinRead+0x10>
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	49 f0       	breq	.+18     	; 0x14e <gpioPinRead+0x1c>
 13c:	83 30       	cpi	r24, 0x03	; 3
 13e:	51 f0       	breq	.+20     	; 0x154 <gpioPinRead+0x22>
 140:	0c c0       	rjmp	.+24     	; 0x15a <gpioPinRead+0x28>
  {
        case GPIOA:
                    Ret_State = PORTA_PIN & u8_pin;
 142:	89 b3       	in	r24, 0x19	; 25
 144:	86 23       	and	r24, r22
                    break;
 146:	08 95       	ret
        case GPIOB:
                    Ret_State = PORTB_PIN & u8_pin;
 148:	86 b3       	in	r24, 0x16	; 22
 14a:	86 23       	and	r24, r22
                    break;
 14c:	08 95       	ret
        case GPIOC:
                    Ret_State = PORTC_PIN & u8_pin;
 14e:	83 b3       	in	r24, 0x13	; 19
 150:	86 23       	and	r24, r22
                    break;
 152:	08 95       	ret
        case GPIOD:
                    Ret_State = PORTD_PIN & u8_pin;
 154:	80 b3       	in	r24, 0x10	; 16
 156:	86 23       	and	r24, r22
                    break;
 158:	08 95       	ret
   }
}

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
   uint8_t Ret_State = 0x00;
 15a:	80 e0       	ldi	r24, 0x00	; 0
                    break;
        default:
                    break;
  }
  return Ret_State;
}
 15c:	08 95       	ret

0000015e <main>:
static volatile uint8_t  g_timeBase   = 1;
static volatile uint8_t  g_speed      = 0;
static volatile uint8_t  sys_state    = Stop;

int main(void)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	2b 97       	sbiw	r28, 0x0b	; 11
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
	//--------[ UART Init ]--------
	UART_cfg uart1_cfg;
	uart1_cfg.baudrate =	   38400;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	96 e9       	ldi	r25, 0x96	; 150
 176:	a0 e0       	ldi	r26, 0x00	; 0
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	88 87       	std	Y+8, r24	; 0x08
 17c:	99 87       	std	Y+9, r25	; 0x09
 17e:	aa 87       	std	Y+10, r26	; 0x0a
 180:	bb 87       	std	Y+11, r27	; 0x0b
	uart1_cfg.dataBits =	   UART_Bits_8;
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	8a 83       	std	Y+2, r24	; 0x02
	uart1_cfg.mode =		   UART_TX;
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	89 83       	std	Y+1, r24	; 0x01
	uart1_cfg.parity =		   No_Parity;
 18a:	1b 82       	std	Y+3, r1	; 0x03
	uart1_cfg.sampleEdge =     RisingEdg;
 18c:	1e 82       	std	Y+6, r1	; 0x06
	uart1_cfg.stopBits =	   StopBits_1;
 18e:	1d 82       	std	Y+5, r1	; 0x05
	uart1_cfg.uartSync =	   UART_Async;
 190:	1c 82       	std	Y+4, r1	; 0x04
	uart1_cfg.uartInterrupts = UART_No_Interrupts;
 192:	1f 82       	std	Y+7, r1	; 0x07
	UART_Init(&uart1_cfg);
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	0e 94 dd 02 	call	0x5ba	; 0x5ba <UART_Init>
	
	//--------[ SPI Init ]--------
	SPI_Init(SPI_Slave, SPI_CLK_F_64, SPI_Mode0, LSB_First, SPI_Interrupts_Enabled);
 19c:	00 e8       	ldi	r16, 0x80	; 128
 19e:	20 e2       	ldi	r18, 0x20	; 32
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	80 e4       	ldi	r24, 0x40	; 64
 1a6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_Init>
	
	//--------[ Timer1 Init ]--------
	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_256, 49910, 0, 0, 0, T1_INTERRUPT_NORMAL);
 1aa:	68 94       	set
 1ac:	aa 24       	eor	r10, r10
 1ae:	a2 f8       	bld	r10, 2
 1b0:	c1 2c       	mov	r12, r1
 1b2:	d1 2c       	mov	r13, r1
 1b4:	e1 2c       	mov	r14, r1
 1b6:	f1 2c       	mov	r15, r1
 1b8:	00 e0       	ldi	r16, 0x00	; 0
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	26 ef       	ldi	r18, 0xF6	; 246
 1be:	32 ec       	ldi	r19, 0xC2	; 194
 1c0:	44 e0       	ldi	r20, 0x04	; 4
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 aa 02 	call	0x554	; 0x554 <timer1Init>
    
	//--------[ Buttons Init ]--------
	pushButtonInit(BTN_0);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <pushButtonInit>
	pushButtonInit(BTN_1);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <pushButtonInit>
		// Start Button
		if(pushButtonGetStatus(BTN_0) == Pressed)
		{
			if(sys_state == Stop)
			{
			  sys_state = Start;
 1da:	bb 24       	eor	r11, r11
 1dc:	b3 94       	inc	r11
		// Stop Button
		if(pushButtonGetStatus(BTN_1) == Pressed)
		{
			if(sys_state == Start)
			{
			  sys_state = Stop;
 1de:	68 94       	set
 1e0:	55 24       	eor	r5, r5
 1e2:	51 f8       	bld	r5, 1
			  timer1Stop();
			  sprintf(g_buffer, "Total Trip Measurements:  Time= %d Seconds, Distance= %d Meters\r\n", g_time, g_distance);
 1e4:	0f 2e       	mov	r0, r31
 1e6:	f2 e6       	ldi	r31, 0x62	; 98
 1e8:	6f 2e       	mov	r6, r31
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	7f 2e       	mov	r7, r31
 1ee:	f0 2d       	mov	r31, r0
 1f0:	0f 2e       	mov	r0, r31
 1f2:	fe ed       	ldi	r31, 0xDE	; 222
 1f4:	8f 2e       	mov	r8, r31
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	9f 2e       	mov	r9, r31
 1fa:	f0 2d       	mov	r31, r0
	pushButtonInit(BTN_1);
	
    while (1) 
    {
		// Start Button
		if(pushButtonGetStatus(BTN_0) == Pressed)
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 01 02 	call	0x402	; 0x402 <pushButtonGetStatus>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	01 f5       	brne	.+64     	; 0x246 <main+0xe8>
		{
			if(sys_state == Stop)
 206:	90 91 60 00 	lds	r25, 0x0060
 20a:	92 30       	cpi	r25, 0x02	; 2
 20c:	b1 f4       	brne	.+44     	; 0x23a <main+0xdc>
			{
			  sys_state = Start;
 20e:	b0 92 60 00 	sts	0x0060, r11
		      timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_256, 49910, 0, 0, 0, T1_INTERRUPT_NORMAL);
 212:	68 94       	set
 214:	aa 24       	eor	r10, r10
 216:	a2 f8       	bld	r10, 2
 218:	c1 2c       	mov	r12, r1
 21a:	d1 2c       	mov	r13, r1
 21c:	e1 2c       	mov	r14, r1
 21e:	f1 2c       	mov	r15, r1
 220:	00 e0       	ldi	r16, 0x00	; 0
 222:	10 e0       	ldi	r17, 0x00	; 0
 224:	26 ef       	ldi	r18, 0xF6	; 246
 226:	32 ec       	ldi	r19, 0xC2	; 194
 228:	44 e0       	ldi	r20, 0x04	; 4
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 aa 02 	call	0x554	; 0x554 <timer1Init>
			  timer1Start();	
 236:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <timer1Start>
			}
			softwareDelayMs(500);
 23a:	64 ef       	ldi	r22, 0xF4	; 244
 23c:	71 e0       	ldi	r23, 0x01	; 1
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 47 02 	call	0x48e	; 0x48e <softwareDelayMs>
		}
		// Stop Button
		if(pushButtonGetStatus(BTN_1) == Pressed)
 246:	8b 2d       	mov	r24, r11
 248:	0e 94 01 02 	call	0x402	; 0x402 <pushButtonGetStatus>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	b1 f6       	brne	.-84     	; 0x1fc <main+0x9e>
		{
			if(sys_state == Start)
 250:	80 91 60 00 	lds	r24, 0x0060
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	31 f5       	brne	.+76     	; 0x2a4 <main+0x146>
			{
			  sys_state = Stop;
 258:	50 92 60 00 	sts	0x0060, r5
			  timer1Stop();
 25c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <timer1Stop>
			  sprintf(g_buffer, "Total Trip Measurements:  Time= %d Seconds, Distance= %d Meters\r\n", g_time, g_distance);
 260:	20 91 db 00 	lds	r18, 0x00DB
 264:	30 91 dc 00 	lds	r19, 0x00DC
 268:	80 91 d9 00 	lds	r24, 0x00D9
 26c:	90 91 da 00 	lds	r25, 0x00DA
 270:	3f 93       	push	r19
 272:	2f 93       	push	r18
 274:	9f 93       	push	r25
 276:	8f 93       	push	r24
 278:	7f 92       	push	r7
 27a:	6f 92       	push	r6
 27c:	9f 92       	push	r9
 27e:	8f 92       	push	r8
 280:	0e 94 7e 03 	call	0x6fc	; 0x6fc <sprintf>
			  UART_Write_String(g_buffer);
 284:	c4 01       	movw	r24, r8
 286:	0e 94 4d 03 	call	0x69a	; 0x69a <UART_Write_String>
			  g_TMR1_C =0;
 28a:	10 92 dd 00 	sts	0x00DD, r1
			  g_distance = 0;
 28e:	10 92 dc 00 	sts	0x00DC, r1
 292:	10 92 db 00 	sts	0x00DB, r1
			  g_speed = 0;
 296:	10 92 d8 00 	sts	0x00D8, r1
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
			}
			softwareDelayMs(500);
 2a4:	64 ef       	ldi	r22, 0xF4	; 244
 2a6:	71 e0       	ldi	r23, 0x01	; 1
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 47 02 	call	0x48e	; 0x48e <softwareDelayMs>
 2b0:	a5 cf       	rjmp	.-182    	; 0x1fc <main+0x9e>

000002b2 <__vector_9>:
		
    }
}

ISR(TIMER1_OVF_vect)
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	2f 93       	push	r18
 2be:	3f 93       	push	r19
 2c0:	4f 93       	push	r20
 2c2:	5f 93       	push	r21
 2c4:	6f 93       	push	r22
 2c6:	7f 93       	push	r23
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	af 93       	push	r26
 2ce:	bf 93       	push	r27
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
	gpioPinToggle(GPIOC, BIT5);
 2d4:	60 e2       	ldi	r22, 0x20	; 32
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	0e 94 81 00 	call	0x102	; 0x102 <gpioPinToggle>
	timer1Set(50000);
 2dc:	80 e5       	ldi	r24, 0x50	; 80
 2de:	93 ec       	ldi	r25, 0xC3	; 195
 2e0:	0e 94 cf 02 	call	0x59e	; 0x59e <timer1Set>
	g_TMR1_C++;
 2e4:	80 91 dd 00 	lds	r24, 0x00DD
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	80 93 dd 00 	sts	0x00DD, r24
	if(g_TMR1_C == 4)
 2ee:	80 91 dd 00 	lds	r24, 0x00DD
 2f2:	84 30       	cpi	r24, 0x04	; 4
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <__vector_9+0x46>
 2f6:	44 c0       	rjmp	.+136    	; 0x380 <__vector_9+0xce>
	{
		g_time += g_timeBase;
 2f8:	20 91 61 00 	lds	r18, 0x0061
 2fc:	80 91 d9 00 	lds	r24, 0x00D9
 300:	90 91 da 00 	lds	r25, 0x00DA
 304:	82 0f       	add	r24, r18
 306:	91 1d       	adc	r25, r1
 308:	90 93 da 00 	sts	0x00DA, r25
 30c:	80 93 d9 00 	sts	0x00D9, r24
		g_TMR1_C = 0;
 310:	10 92 dd 00 	sts	0x00DD, r1
	    g_distance += (g_speed * g_timeBase);
 314:	30 91 d8 00 	lds	r19, 0x00D8
 318:	20 91 61 00 	lds	r18, 0x0061
 31c:	80 91 db 00 	lds	r24, 0x00DB
 320:	90 91 dc 00 	lds	r25, 0x00DC
 324:	32 9f       	mul	r19, r18
 326:	80 0d       	add	r24, r0
 328:	91 1d       	adc	r25, r1
 32a:	11 24       	eor	r1, r1
 32c:	90 93 dc 00 	sts	0x00DC, r25
 330:	80 93 db 00 	sts	0x00DB, r24
		sprintf(g_buffer, "Measurements:  Speed= %d, Time= %d, Distance= %d\r\n", g_speed, g_time, g_distance);
 334:	20 91 db 00 	lds	r18, 0x00DB
 338:	30 91 dc 00 	lds	r19, 0x00DC
 33c:	80 91 d9 00 	lds	r24, 0x00D9
 340:	90 91 da 00 	lds	r25, 0x00DA
 344:	40 91 d8 00 	lds	r20, 0x00D8
 348:	3f 93       	push	r19
 34a:	2f 93       	push	r18
 34c:	9f 93       	push	r25
 34e:	8f 93       	push	r24
 350:	1f 92       	push	r1
 352:	4f 93       	push	r20
 354:	84 ea       	ldi	r24, 0xA4	; 164
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	9f 93       	push	r25
 35a:	8f 93       	push	r24
 35c:	8e ed       	ldi	r24, 0xDE	; 222
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	9f 93       	push	r25
 362:	8f 93       	push	r24
 364:	0e 94 7e 03 	call	0x6fc	; 0x6fc <sprintf>
		UART_Write_String(g_buffer);
 368:	8e ed       	ldi	r24, 0xDE	; 222
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 4d 03 	call	0x69a	; 0x69a <UART_Write_String>
 370:	8d b7       	in	r24, 0x3d	; 61
 372:	9e b7       	in	r25, 0x3e	; 62
 374:	0a 96       	adiw	r24, 0x0a	; 10
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	9e bf       	out	0x3e, r25	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	8d bf       	out	0x3d, r24	; 61
	}
}
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	7f 91       	pop	r23
 38e:	6f 91       	pop	r22
 390:	5f 91       	pop	r21
 392:	4f 91       	pop	r20
 394:	3f 91       	pop	r19
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_12>:

ISR(SPI_STC_vect)
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	8f 93       	push	r24
	g_speed = SPDR-48;
 3ae:	8f b1       	in	r24, 0x0f	; 15
 3b0:	80 53       	subi	r24, 0x30	; 48
 3b2:	80 93 d8 00 	sts	0x00D8, r24
 3b6:	8f 91       	pop	r24
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <pushButtonInit>:
 */ 
#include "pushButton.h"

void pushButtonInit(En_buttonId_t en_butotn_id)
{
   switch(en_butotn_id)
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	61 f0       	breq	.+24     	; 0x3de <pushButtonInit+0x1c>
 3c6:	28 f0       	brcs	.+10     	; 0x3d2 <pushButtonInit+0x10>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	79 f0       	breq	.+30     	; 0x3ea <pushButtonInit+0x28>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	99 f0       	breq	.+38     	; 0x3f6 <pushButtonInit+0x34>
 3d0:	08 95       	ret
   {
      case BTN_0:
                   gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	60 e1       	ldi	r22, 0x10	; 16
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
                   break;
 3dc:	08 95       	ret
      case BTN_1:
                   gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	64 e0       	ldi	r22, 0x04	; 4
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
                   break;
 3e8:	08 95       	ret
      case BTN_2:
                   gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
                   break;
 3f4:	08 95       	ret
      case BTN_3:
                   gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	68 e0       	ldi	r22, 0x08	; 8
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
 400:	08 95       	ret

00000402 <pushButtonGetStatus>:
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
   En_buttonStatus_t ret = 0x00;
   switch(en_butotn_id)
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	99 f0       	breq	.+38     	; 0x42c <pushButtonGetStatus+0x2a>
 406:	28 f0       	brcs	.+10     	; 0x412 <pushButtonGetStatus+0x10>
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	e9 f0       	breq	.+58     	; 0x446 <pushButtonGetStatus+0x44>
 40c:	83 30       	cpi	r24, 0x03	; 3
 40e:	41 f1       	breq	.+80     	; 0x460 <pushButtonGetStatus+0x5e>
 410:	34 c0       	rjmp	.+104    	; 0x47a <pushButtonGetStatus+0x78>
   {
       case BTN_0:
	               softwareDelayMs(15);
 412:	6f e0       	ldi	r22, 0x0F	; 15
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 47 02 	call	0x48e	; 0x48e <softwareDelayMs>
                   ret = gpioPinRead(BTN_0_GPIO, BTN_0_BIT)? Pressed:Released;
 41e:	60 e1       	ldi	r22, 0x10	; 16
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	0e 94 99 00 	call	0x132	; 0x132 <gpioPinRead>
 426:	81 11       	cpse	r24, r1
 428:	2a c0       	rjmp	.+84     	; 0x47e <pushButtonGetStatus+0x7c>
 42a:	08 95       	ret
                   break;
       case BTN_1:
	               softwareDelayMs(15);
 42c:	6f e0       	ldi	r22, 0x0F	; 15
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 47 02 	call	0x48e	; 0x48e <softwareDelayMs>
                   ret = gpioPinRead(BTN_1_GPIO, BTN_1_BIT)? Pressed:Released;
 438:	64 e0       	ldi	r22, 0x04	; 4
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 99 00 	call	0x132	; 0x132 <gpioPinRead>
 440:	81 11       	cpse	r24, r1
 442:	1f c0       	rjmp	.+62     	; 0x482 <pushButtonGetStatus+0x80>
 444:	08 95       	ret
                   break;
       case BTN_2:
	               softwareDelayMs(15);
 446:	6f e0       	ldi	r22, 0x0F	; 15
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 47 02 	call	0x48e	; 0x48e <softwareDelayMs>
                   ret = gpioPinRead(BTN_2_GPIO, BTN_2_BIT)? Pressed:Released;
 452:	64 e0       	ldi	r22, 0x04	; 4
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 99 00 	call	0x132	; 0x132 <gpioPinRead>
 45a:	81 11       	cpse	r24, r1
 45c:	14 c0       	rjmp	.+40     	; 0x486 <pushButtonGetStatus+0x84>
 45e:	08 95       	ret
                   break;
       case BTN_3:
	               softwareDelayMs(15);
 460:	6f e0       	ldi	r22, 0x0F	; 15
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 47 02 	call	0x48e	; 0x48e <softwareDelayMs>
                   ret = gpioPinRead(BTN_3_GPIO, BTN_3_BIT)? Pressed:Released;
 46c:	68 e0       	ldi	r22, 0x08	; 8
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	0e 94 99 00 	call	0x132	; 0x132 <gpioPinRead>
 474:	81 11       	cpse	r24, r1
 476:	09 c0       	rjmp	.+18     	; 0x48a <pushButtonGetStatus+0x88>
 478:	08 95       	ret
   }
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
   En_buttonStatus_t ret = 0x00;
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
   switch(en_butotn_id)
   {
       case BTN_0:
	               softwareDelayMs(15);
                   ret = gpioPinRead(BTN_0_GPIO, BTN_0_BIT)? Pressed:Released;
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	08 95       	ret
                   break;
       case BTN_1:
	               softwareDelayMs(15);
                   ret = gpioPinRead(BTN_1_GPIO, BTN_1_BIT)? Pressed:Released;
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	08 95       	ret
                   break;
       case BTN_2:
	               softwareDelayMs(15);
                   ret = gpioPinRead(BTN_2_GPIO, BTN_2_BIT)? Pressed:Released;
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	08 95       	ret
                   break;
       case BTN_3:
	               softwareDelayMs(15);
                   ret = gpioPinRead(BTN_3_GPIO, BTN_3_BIT)? Pressed:Released;
 48a:	82 e0       	ldi	r24, 0x02	; 2
                   break;
       default:
                   break;
   }
   return ret;
 48c:	08 95       	ret

0000048e <softwareDelayMs>:
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	8b 01       	movw	r16, r22
 494:	9c 01       	movw	r18, r24
  uint32_t ticks=2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 496:	67 2b       	or	r22, r23
 498:	68 2b       	or	r22, r24
 49a:	69 2b       	or	r22, r25
 49c:	81 f4       	brne	.+32     	; 0x4be <softwareDelayMs+0x30>
 49e:	17 c0       	rjmp	.+46     	; 0x4ce <softwareDelayMs+0x40>
 4a0:	01 96       	adiw	r24, 0x01	; 1
  {
    for(i=0; i<ticks; i++)
 4a2:	82 3f       	cpi	r24, 0xF2	; 242
 4a4:	a8 e0       	ldi	r26, 0x08	; 8
 4a6:	9a 07       	cpc	r25, r26
 4a8:	d9 f7       	brne	.-10     	; 0x4a0 <softwareDelayMs+0x12>
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
  uint32_t ticks=2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 4aa:	4f 5f       	subi	r20, 0xFF	; 255
 4ac:	5f 4f       	sbci	r21, 0xFF	; 255
 4ae:	6f 4f       	sbci	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	40 17       	cp	r20, r16
 4b4:	51 07       	cpc	r21, r17
 4b6:	62 07       	cpc	r22, r18
 4b8:	73 07       	cpc	r23, r19
 4ba:	31 f4       	brne	.+12     	; 0x4c8 <softwareDelayMs+0x3a>
 4bc:	08 c0       	rjmp	.+16     	; 0x4ce <softwareDelayMs+0x40>
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	ba 01       	movw	r22, r20
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	e0 e0       	ldi	r30, 0x00	; 0
 4c8:	8f 2f       	mov	r24, r31
 4ca:	9e 2f       	mov	r25, r30
 4cc:	e9 cf       	rjmp	.-46     	; 0x4a0 <softwareDelayMs+0x12>
  for(j=0; j<u32_delay_in_ms; j++)
  {
    for(i=0; i<ticks; i++)
    { }
  }
}
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	08 95       	ret

000004d4 <SPI_Init>:



void SPI_Init(En_spiMode_t a_spiMode, En_spiClkRate_t a_spiCLK, En_spiModeNumber_t a_spiModeNum, 
			  En_spiDataOrder_t a_spiDataOrder, En_spiInterrupts_t a_spiInterrupts)
{
 4d4:	ff 92       	push	r15
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	c8 2f       	mov	r28, r24
 4e0:	d6 2f       	mov	r29, r22
 4e2:	f4 2e       	mov	r15, r20
 4e4:	12 2f       	mov	r17, r18
	SPCR = 0x00;
 4e6:	1d b8       	out	0x0d, r1	; 13
	switch(a_spiMode)
 4e8:	80 34       	cpi	r24, 0x40	; 64
 4ea:	91 f0       	breq	.+36     	; 0x510 <SPI_Init+0x3c>
 4ec:	80 35       	cpi	r24, 0x50	; 80
 4ee:	21 f5       	brne	.+72     	; 0x538 <SPI_Init+0x64>
	{
		case SPI_Master:
				gpioPinDirection(MISO_GPIO, MISO_BIT, INPUT);
 4f0:	40 e0       	ldi	r20, 0x00	; 0
 4f2:	60 e4       	ldi	r22, 0x40	; 64
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				gpioPinDirection(MOSI_GPIO, MOSI_BIT, OUTPUT);
 4fa:	4f ef       	ldi	r20, 0xFF	; 255
 4fc:	60 e2       	ldi	r22, 0x20	; 32
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				gpioPinDirection(SCK_GPIO, SCK_BIT, OUTPUT);
 504:	4f ef       	ldi	r20, 0xFF	; 255
 506:	60 e8       	ldi	r22, 0x80	; 128
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				break;
 50e:	14 c0       	rjmp	.+40     	; 0x538 <SPI_Init+0x64>
		case SPI_Slave:
				gpioPinDirection(MISO_GPIO, MISO_BIT, OUTPUT);
 510:	4f ef       	ldi	r20, 0xFF	; 255
 512:	60 e4       	ldi	r22, 0x40	; 64
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				gpioPinDirection(MOSI_GPIO, MOSI_BIT, INPUT);
 51a:	40 e0       	ldi	r20, 0x00	; 0
 51c:	60 e2       	ldi	r22, 0x20	; 32
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				gpioPinDirection(SCK_GPIO, SCK_BIT, INPUT);
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	60 e8       	ldi	r22, 0x80	; 128
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				gpioPinDirection(SS_GPIO, SS_BIT, INPUT);
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	60 e1       	ldi	r22, 0x10	; 16
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
 538:	0f 29       	or	r16, r15
 53a:	10 2b       	or	r17, r16
 53c:	d1 2b       	or	r29, r17
				break;
		default:
				break;
	}	
	SPCR =  (a_spiMode | a_spiCLK | a_spiDataOrder | a_spiModeNum | a_spiInterrupts);
 53e:	cd 2b       	or	r28, r29
 540:	cd b9       	out	0x0d, r28	; 13
	SREG |= (0x80);
 542:	8f b7       	in	r24, 0x3f	; 63
 544:	80 68       	ori	r24, 0x80	; 128
 546:	8f bf       	out	0x3f, r24	; 63
}
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	08 95       	ret

00000554 <timer1Init>:
/*================================================================*/
/*==================[ Timer1 Control Functions ]==================*/
/*================================================================*/

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,En_timer1perscaler_t en_prescal, uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
 554:	af 92       	push	r10
 556:	cf 92       	push	r12
 558:	df 92       	push	r13
 55a:	ef 92       	push	r14
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
	TCCR1 = 0;
 562:	1f bc       	out	0x2f, r1	; 47
 564:	1e bc       	out	0x2e, r1	; 46
	TCCR1 = (en_mode | en_OC);
 566:	86 2b       	or	r24, r22
 568:	97 2b       	or	r25, r23
 56a:	9f bd       	out	0x2f, r25	; 47
 56c:	8e bd       	out	0x2e, r24	; 46
	gen_TMR1PS = en_prescal;
 56e:	40 93 10 01 	sts	0x0110, r20
	TCNT1 = u16_initialValue;
 572:	3d bd       	out	0x2d, r19	; 45
 574:	2c bd       	out	0x2c, r18	; 44
	OCR1A = u16_outputCompareA;
 576:	1b bd       	out	0x2b, r17	; 43
 578:	0a bd       	out	0x2a, r16	; 42
	OCR1B = u16_outputCompareB;
 57a:	f9 bc       	out	0x29, r15	; 41
 57c:	e8 bc       	out	0x28, r14	; 40
	ICR1 = u16_inputCapture;
 57e:	d7 bc       	out	0x27, r13	; 39
 580:	c6 bc       	out	0x26, r12	; 38
    TIMSK |= en_interruptMask;
 582:	89 b7       	in	r24, 0x39	; 57
 584:	a8 2a       	or	r10, r24
 586:	a9 be       	out	0x39, r10	; 57
    SREG  |= (0x80);
 588:	8f b7       	in	r24, 0x3f	; 63
 58a:	80 68       	ori	r24, 0x80	; 128
 58c:	8f bf       	out	0x3f, r24	; 63
}
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	df 90       	pop	r13
 598:	cf 90       	pop	r12
 59a:	af 90       	pop	r10
 59c:	08 95       	ret

0000059e <timer1Set>:
void timer1Set(uint16_t u16_value)
{
	TCNT1 = u16_value;
 59e:	9d bd       	out	0x2d, r25	; 45
 5a0:	8c bd       	out	0x2c, r24	; 44
 5a2:	08 95       	ret

000005a4 <timer1Start>:
{
	return TCNT1;
}
void timer1Start(void)
{
	TCCR1 |= gen_TMR1PS;
 5a4:	8e b5       	in	r24, 0x2e	; 46
 5a6:	9f b5       	in	r25, 0x2f	; 47
 5a8:	20 91 10 01 	lds	r18, 0x0110
 5ac:	82 2b       	or	r24, r18
 5ae:	9f bd       	out	0x2f, r25	; 47
 5b0:	8e bd       	out	0x2e, r24	; 46
 5b2:	08 95       	ret

000005b4 <timer1Stop>:
}
void timer1Stop(void)
{
	TCCR1 = T1_NO_CLOCK;
 5b4:	1f bc       	out	0x2f, r1	; 47
 5b6:	1e bc       	out	0x2e, r1	; 46
 5b8:	08 95       	ret

000005ba <UART_Init>:

#include "UART.h"


void UART_Init(UART_cfg* uart_cfg)
{
 5ba:	cf 92       	push	r12
 5bc:	df 92       	push	r13
 5be:	ef 92       	push	r14
 5c0:	ff 92       	push	r15
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	ec 01       	movw	r28, r24
	//UCSRC = 0x00;
	//UCSRB = 0x00;
	//UCSRB |= (1<<4 | 1<<3); 	
	// Set The UART Mode OF Operation
	//CLEAR_BIT(UCSRB, 2);
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
 5c8:	9a b1       	in	r25, 0x0a	; 10
 5ca:	88 81       	ld	r24, Y
 5cc:	89 2b       	or	r24, r25
 5ce:	9e 81       	ldd	r25, Y+6	; 0x06
 5d0:	89 2b       	or	r24, r25
 5d2:	8a b9       	out	0x0a, r24	; 10
	//UCSRC |= 0x80;
	// Set The UART Synchronization
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
 5d4:	20 b5       	in	r18, 0x20	; 32
	// Set The UART Mode OF Operation
	//CLEAR_BIT(UCSRB, 2);
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
	//UCSRC |= 0x80;
	// Set The UART Synchronization
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
 5d6:	8b 81       	ldd	r24, Y+3	; 0x03
 5d8:	9d 81       	ldd	r25, Y+5	; 0x05
 5da:	89 2b       	or	r24, r25
 5dc:	80 68       	ori	r24, 0x80	; 128
 5de:	99 81       	ldd	r25, Y+1	; 0x01
 5e0:	89 2b       	or	r24, r25
 5e2:	9a 81       	ldd	r25, Y+2	; 0x02
 5e4:	89 2b       	or	r24, r25
 5e6:	9c 81       	ldd	r25, Y+4	; 0x04
 5e8:	89 2b       	or	r24, r25
	UCSRC |= uart_control;
 5ea:	82 2b       	or	r24, r18
 5ec:	80 bd       	out	0x20, r24	; 32
	//UCSRC = 0x86;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
 5ee:	8f 81       	ldd	r24, Y+7	; 0x07
 5f0:	98 85       	ldd	r25, Y+8	; 0x08
 5f2:	a9 85       	ldd	r26, Y+9	; 0x09
 5f4:	ba 85       	ldd	r27, Y+10	; 0x0a
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	aa 1f       	adc	r26, r26
 5fc:	bb 1f       	adc	r27, r27
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	aa 1f       	adc	r26, r26
 604:	bb 1f       	adc	r27, r27
 606:	9c 01       	movw	r18, r24
 608:	ad 01       	movw	r20, r26
 60a:	22 0f       	add	r18, r18
 60c:	33 1f       	adc	r19, r19
 60e:	44 1f       	adc	r20, r20
 610:	55 1f       	adc	r21, r21
 612:	22 0f       	add	r18, r18
 614:	33 1f       	adc	r19, r19
 616:	44 1f       	adc	r20, r20
 618:	55 1f       	adc	r21, r21
 61a:	0f 2e       	mov	r0, r31
 61c:	c1 2c       	mov	r12, r1
 61e:	f4 e2       	ldi	r31, 0x24	; 36
 620:	df 2e       	mov	r13, r31
 622:	f4 ef       	ldi	r31, 0xF4	; 244
 624:	ef 2e       	mov	r14, r31
 626:	f1 2c       	mov	r15, r1
 628:	f0 2d       	mov	r31, r0
 62a:	c7 01       	movw	r24, r14
 62c:	b6 01       	movw	r22, r12
 62e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__udivmodsi4>
 632:	21 50       	subi	r18, 0x01	; 1
 634:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
 636:	8f 81       	ldd	r24, Y+7	; 0x07
 638:	98 85       	ldd	r25, Y+8	; 0x08
 63a:	a9 85       	ldd	r26, Y+9	; 0x09
 63c:	ba 85       	ldd	r27, Y+10	; 0x0a
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	aa 1f       	adc	r26, r26
 644:	bb 1f       	adc	r27, r27
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	aa 1f       	adc	r26, r26
 64c:	bb 1f       	adc	r27, r27
 64e:	9c 01       	movw	r18, r24
 650:	ad 01       	movw	r20, r26
 652:	22 0f       	add	r18, r18
 654:	33 1f       	adc	r19, r19
 656:	44 1f       	adc	r20, r20
 658:	55 1f       	adc	r21, r21
 65a:	22 0f       	add	r18, r18
 65c:	33 1f       	adc	r19, r19
 65e:	44 1f       	adc	r20, r20
 660:	55 1f       	adc	r21, r21
 662:	c7 01       	movw	r24, r14
 664:	b6 01       	movw	r22, r12
 666:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__udivmodsi4>
 66a:	da 01       	movw	r26, r20
 66c:	c9 01       	movw	r24, r18
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	a1 09       	sbc	r26, r1
 672:	b1 09       	sbc	r27, r1
 674:	89 2f       	mov	r24, r25
 676:	9a 2f       	mov	r25, r26
 678:	ab 2f       	mov	r26, r27
 67a:	bb 27       	eor	r27, r27
 67c:	80 bd       	out	0x20, r24	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	SREG  |= (0x80);
 67e:	8f b7       	in	r24, 0x3f	; 63
 680:	80 68       	ori	r24, 0x80	; 128
 682:	8f bf       	out	0x3f, r24	; 63
}
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	ff 90       	pop	r15
 68a:	ef 90       	pop	r14
 68c:	df 90       	pop	r13
 68e:	cf 90       	pop	r12
 690:	08 95       	ret

00000692 <UART_Write>:

void UART_Write(uint8_t data)
{
	// Wait For Empty Transmit Budder
	while(!(UCSRA & (1<<5)));
 692:	5d 9b       	sbis	0x0b, 5	; 11
 694:	fe cf       	rjmp	.-4      	; 0x692 <UART_Write>
	// Write The Data To The Buffer & Send!
	UDR = data;
 696:	8c b9       	out	0x0c, r24	; 12
 698:	08 95       	ret

0000069a <UART_Write_String>:
}

void UART_Write_String(uint8_t* str)
{
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	ec 01       	movw	r28, r24
	uint16_t i=0;
	while(str[i] != '\0')
 6a0:	88 81       	ld	r24, Y
 6a2:	88 23       	and	r24, r24
 6a4:	31 f0       	breq	.+12     	; 0x6b2 <UART_Write_String+0x18>
 6a6:	21 96       	adiw	r28, 0x01	; 1
		UART_Write(str[i++]);
 6a8:	0e 94 49 03 	call	0x692	; 0x692 <UART_Write>
}

void UART_Write_String(uint8_t* str)
{
	uint16_t i=0;
	while(str[i] != '\0')
 6ac:	89 91       	ld	r24, Y+
 6ae:	81 11       	cpse	r24, r1
 6b0:	fb cf       	rjmp	.-10     	; 0x6a8 <UART_Write_String+0xe>
		UART_Write(str[i++]);
}
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

000006b8 <__udivmodsi4>:
 6b8:	a1 e2       	ldi	r26, 0x21	; 33
 6ba:	1a 2e       	mov	r1, r26
 6bc:	aa 1b       	sub	r26, r26
 6be:	bb 1b       	sub	r27, r27
 6c0:	fd 01       	movw	r30, r26
 6c2:	0d c0       	rjmp	.+26     	; 0x6de <__udivmodsi4_ep>

000006c4 <__udivmodsi4_loop>:
 6c4:	aa 1f       	adc	r26, r26
 6c6:	bb 1f       	adc	r27, r27
 6c8:	ee 1f       	adc	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	a2 17       	cp	r26, r18
 6ce:	b3 07       	cpc	r27, r19
 6d0:	e4 07       	cpc	r30, r20
 6d2:	f5 07       	cpc	r31, r21
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__udivmodsi4_ep>
 6d6:	a2 1b       	sub	r26, r18
 6d8:	b3 0b       	sbc	r27, r19
 6da:	e4 0b       	sbc	r30, r20
 6dc:	f5 0b       	sbc	r31, r21

000006de <__udivmodsi4_ep>:
 6de:	66 1f       	adc	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	1a 94       	dec	r1
 6e8:	69 f7       	brne	.-38     	; 0x6c4 <__udivmodsi4_loop>
 6ea:	60 95       	com	r22
 6ec:	70 95       	com	r23
 6ee:	80 95       	com	r24
 6f0:	90 95       	com	r25
 6f2:	9b 01       	movw	r18, r22
 6f4:	ac 01       	movw	r20, r24
 6f6:	bd 01       	movw	r22, r26
 6f8:	cf 01       	movw	r24, r30
 6fa:	08 95       	ret

000006fc <sprintf>:
 6fc:	ae e0       	ldi	r26, 0x0E	; 14
 6fe:	b0 e0       	ldi	r27, 0x00	; 0
 700:	e4 e8       	ldi	r30, 0x84	; 132
 702:	f3 e0       	ldi	r31, 0x03	; 3
 704:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__prologue_saves__+0x1c>
 708:	0d 89       	ldd	r16, Y+21	; 0x15
 70a:	1e 89       	ldd	r17, Y+22	; 0x16
 70c:	86 e0       	ldi	r24, 0x06	; 6
 70e:	8c 83       	std	Y+4, r24	; 0x04
 710:	1a 83       	std	Y+2, r17	; 0x02
 712:	09 83       	std	Y+1, r16	; 0x01
 714:	8f ef       	ldi	r24, 0xFF	; 255
 716:	9f e7       	ldi	r25, 0x7F	; 127
 718:	9e 83       	std	Y+6, r25	; 0x06
 71a:	8d 83       	std	Y+5, r24	; 0x05
 71c:	ae 01       	movw	r20, r28
 71e:	47 5e       	subi	r20, 0xE7	; 231
 720:	5f 4f       	sbci	r21, 0xFF	; 255
 722:	6f 89       	ldd	r22, Y+23	; 0x17
 724:	78 8d       	ldd	r23, Y+24	; 0x18
 726:	ce 01       	movw	r24, r28
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	0e 94 a1 03 	call	0x742	; 0x742 <vfprintf>
 72e:	2f 81       	ldd	r18, Y+7	; 0x07
 730:	38 85       	ldd	r19, Y+8	; 0x08
 732:	f8 01       	movw	r30, r16
 734:	e2 0f       	add	r30, r18
 736:	f3 1f       	adc	r31, r19
 738:	10 82       	st	Z, r1
 73a:	2e 96       	adiw	r28, 0x0e	; 14
 73c:	e4 e0       	ldi	r30, 0x04	; 4
 73e:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__epilogue_restores__+0x1c>

00000742 <vfprintf>:
 742:	ac e0       	ldi	r26, 0x0C	; 12
 744:	b0 e0       	ldi	r27, 0x00	; 0
 746:	e7 ea       	ldi	r30, 0xA7	; 167
 748:	f3 e0       	ldi	r31, 0x03	; 3
 74a:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__prologue_saves__>
 74e:	7c 01       	movw	r14, r24
 750:	6b 01       	movw	r12, r22
 752:	8a 01       	movw	r16, r20
 754:	fc 01       	movw	r30, r24
 756:	17 82       	std	Z+7, r1	; 0x07
 758:	16 82       	std	Z+6, r1	; 0x06
 75a:	83 81       	ldd	r24, Z+3	; 0x03
 75c:	81 ff       	sbrs	r24, 1
 75e:	bd c1       	rjmp	.+890    	; 0xada <__stack+0x27b>
 760:	ce 01       	movw	r24, r28
 762:	01 96       	adiw	r24, 0x01	; 1
 764:	4c 01       	movw	r8, r24
 766:	f7 01       	movw	r30, r14
 768:	93 81       	ldd	r25, Z+3	; 0x03
 76a:	f6 01       	movw	r30, r12
 76c:	93 fd       	sbrc	r25, 3
 76e:	85 91       	lpm	r24, Z+
 770:	93 ff       	sbrs	r25, 3
 772:	81 91       	ld	r24, Z+
 774:	6f 01       	movw	r12, r30
 776:	88 23       	and	r24, r24
 778:	09 f4       	brne	.+2      	; 0x77c <vfprintf+0x3a>
 77a:	ab c1       	rjmp	.+854    	; 0xad2 <__stack+0x273>
 77c:	85 32       	cpi	r24, 0x25	; 37
 77e:	39 f4       	brne	.+14     	; 0x78e <vfprintf+0x4c>
 780:	93 fd       	sbrc	r25, 3
 782:	85 91       	lpm	r24, Z+
 784:	93 ff       	sbrs	r25, 3
 786:	81 91       	ld	r24, Z+
 788:	6f 01       	movw	r12, r30
 78a:	85 32       	cpi	r24, 0x25	; 37
 78c:	29 f4       	brne	.+10     	; 0x798 <vfprintf+0x56>
 78e:	b7 01       	movw	r22, r14
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 89 05 	call	0xb12	; 0xb12 <fputc>
 796:	e7 cf       	rjmp	.-50     	; 0x766 <vfprintf+0x24>
 798:	51 2c       	mov	r5, r1
 79a:	31 2c       	mov	r3, r1
 79c:	20 e0       	ldi	r18, 0x00	; 0
 79e:	20 32       	cpi	r18, 0x20	; 32
 7a0:	a0 f4       	brcc	.+40     	; 0x7ca <vfprintf+0x88>
 7a2:	8b 32       	cpi	r24, 0x2B	; 43
 7a4:	69 f0       	breq	.+26     	; 0x7c0 <vfprintf+0x7e>
 7a6:	30 f4       	brcc	.+12     	; 0x7b4 <vfprintf+0x72>
 7a8:	80 32       	cpi	r24, 0x20	; 32
 7aa:	59 f0       	breq	.+22     	; 0x7c2 <vfprintf+0x80>
 7ac:	83 32       	cpi	r24, 0x23	; 35
 7ae:	69 f4       	brne	.+26     	; 0x7ca <vfprintf+0x88>
 7b0:	20 61       	ori	r18, 0x10	; 16
 7b2:	2c c0       	rjmp	.+88     	; 0x80c <vfprintf+0xca>
 7b4:	8d 32       	cpi	r24, 0x2D	; 45
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <vfprintf+0x84>
 7b8:	80 33       	cpi	r24, 0x30	; 48
 7ba:	39 f4       	brne	.+14     	; 0x7ca <vfprintf+0x88>
 7bc:	21 60       	ori	r18, 0x01	; 1
 7be:	26 c0       	rjmp	.+76     	; 0x80c <vfprintf+0xca>
 7c0:	22 60       	ori	r18, 0x02	; 2
 7c2:	24 60       	ori	r18, 0x04	; 4
 7c4:	23 c0       	rjmp	.+70     	; 0x80c <vfprintf+0xca>
 7c6:	28 60       	ori	r18, 0x08	; 8
 7c8:	21 c0       	rjmp	.+66     	; 0x80c <vfprintf+0xca>
 7ca:	27 fd       	sbrc	r18, 7
 7cc:	27 c0       	rjmp	.+78     	; 0x81c <vfprintf+0xda>
 7ce:	30 ed       	ldi	r19, 0xD0	; 208
 7d0:	38 0f       	add	r19, r24
 7d2:	3a 30       	cpi	r19, 0x0A	; 10
 7d4:	78 f4       	brcc	.+30     	; 0x7f4 <vfprintf+0xb2>
 7d6:	26 ff       	sbrs	r18, 6
 7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <vfprintf+0xa4>
 7da:	fa e0       	ldi	r31, 0x0A	; 10
 7dc:	5f 9e       	mul	r5, r31
 7de:	30 0d       	add	r19, r0
 7e0:	11 24       	eor	r1, r1
 7e2:	53 2e       	mov	r5, r19
 7e4:	13 c0       	rjmp	.+38     	; 0x80c <vfprintf+0xca>
 7e6:	8a e0       	ldi	r24, 0x0A	; 10
 7e8:	38 9e       	mul	r3, r24
 7ea:	30 0d       	add	r19, r0
 7ec:	11 24       	eor	r1, r1
 7ee:	33 2e       	mov	r3, r19
 7f0:	20 62       	ori	r18, 0x20	; 32
 7f2:	0c c0       	rjmp	.+24     	; 0x80c <vfprintf+0xca>
 7f4:	8e 32       	cpi	r24, 0x2E	; 46
 7f6:	21 f4       	brne	.+8      	; 0x800 <vfprintf+0xbe>
 7f8:	26 fd       	sbrc	r18, 6
 7fa:	6b c1       	rjmp	.+726    	; 0xad2 <__stack+0x273>
 7fc:	20 64       	ori	r18, 0x40	; 64
 7fe:	06 c0       	rjmp	.+12     	; 0x80c <vfprintf+0xca>
 800:	8c 36       	cpi	r24, 0x6C	; 108
 802:	11 f4       	brne	.+4      	; 0x808 <vfprintf+0xc6>
 804:	20 68       	ori	r18, 0x80	; 128
 806:	02 c0       	rjmp	.+4      	; 0x80c <vfprintf+0xca>
 808:	88 36       	cpi	r24, 0x68	; 104
 80a:	41 f4       	brne	.+16     	; 0x81c <vfprintf+0xda>
 80c:	f6 01       	movw	r30, r12
 80e:	93 fd       	sbrc	r25, 3
 810:	85 91       	lpm	r24, Z+
 812:	93 ff       	sbrs	r25, 3
 814:	81 91       	ld	r24, Z+
 816:	6f 01       	movw	r12, r30
 818:	81 11       	cpse	r24, r1
 81a:	c1 cf       	rjmp	.-126    	; 0x79e <vfprintf+0x5c>
 81c:	98 2f       	mov	r25, r24
 81e:	9f 7d       	andi	r25, 0xDF	; 223
 820:	95 54       	subi	r25, 0x45	; 69
 822:	93 30       	cpi	r25, 0x03	; 3
 824:	28 f4       	brcc	.+10     	; 0x830 <vfprintf+0xee>
 826:	0c 5f       	subi	r16, 0xFC	; 252
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	ff e3       	ldi	r31, 0x3F	; 63
 82c:	f9 83       	std	Y+1, r31	; 0x01
 82e:	0d c0       	rjmp	.+26     	; 0x84a <vfprintf+0x108>
 830:	83 36       	cpi	r24, 0x63	; 99
 832:	31 f0       	breq	.+12     	; 0x840 <vfprintf+0xfe>
 834:	83 37       	cpi	r24, 0x73	; 115
 836:	71 f0       	breq	.+28     	; 0x854 <vfprintf+0x112>
 838:	83 35       	cpi	r24, 0x53	; 83
 83a:	09 f0       	breq	.+2      	; 0x83e <vfprintf+0xfc>
 83c:	5b c0       	rjmp	.+182    	; 0x8f4 <__stack+0x95>
 83e:	22 c0       	rjmp	.+68     	; 0x884 <__stack+0x25>
 840:	f8 01       	movw	r30, r16
 842:	80 81       	ld	r24, Z
 844:	89 83       	std	Y+1, r24	; 0x01
 846:	0e 5f       	subi	r16, 0xFE	; 254
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	44 24       	eor	r4, r4
 84c:	43 94       	inc	r4
 84e:	51 2c       	mov	r5, r1
 850:	54 01       	movw	r10, r8
 852:	15 c0       	rjmp	.+42     	; 0x87e <__stack+0x1f>
 854:	38 01       	movw	r6, r16
 856:	f2 e0       	ldi	r31, 0x02	; 2
 858:	6f 0e       	add	r6, r31
 85a:	71 1c       	adc	r7, r1
 85c:	f8 01       	movw	r30, r16
 85e:	a0 80       	ld	r10, Z
 860:	b1 80       	ldd	r11, Z+1	; 0x01
 862:	26 ff       	sbrs	r18, 6
 864:	03 c0       	rjmp	.+6      	; 0x86c <__stack+0xd>
 866:	65 2d       	mov	r22, r5
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
 86c:	6f ef       	ldi	r22, 0xFF	; 255
 86e:	7f ef       	ldi	r23, 0xFF	; 255
 870:	c5 01       	movw	r24, r10
 872:	2c 87       	std	Y+12, r18	; 0x0c
 874:	0e 94 7e 05 	call	0xafc	; 0xafc <strnlen>
 878:	2c 01       	movw	r4, r24
 87a:	83 01       	movw	r16, r6
 87c:	2c 85       	ldd	r18, Y+12	; 0x0c
 87e:	2f 77       	andi	r18, 0x7F	; 127
 880:	22 2e       	mov	r2, r18
 882:	17 c0       	rjmp	.+46     	; 0x8b2 <__stack+0x53>
 884:	38 01       	movw	r6, r16
 886:	f2 e0       	ldi	r31, 0x02	; 2
 888:	6f 0e       	add	r6, r31
 88a:	71 1c       	adc	r7, r1
 88c:	f8 01       	movw	r30, r16
 88e:	a0 80       	ld	r10, Z
 890:	b1 80       	ldd	r11, Z+1	; 0x01
 892:	26 ff       	sbrs	r18, 6
 894:	03 c0       	rjmp	.+6      	; 0x89c <__stack+0x3d>
 896:	65 2d       	mov	r22, r5
 898:	70 e0       	ldi	r23, 0x00	; 0
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
 89c:	6f ef       	ldi	r22, 0xFF	; 255
 89e:	7f ef       	ldi	r23, 0xFF	; 255
 8a0:	c5 01       	movw	r24, r10
 8a2:	2c 87       	std	Y+12, r18	; 0x0c
 8a4:	0e 94 73 05 	call	0xae6	; 0xae6 <strnlen_P>
 8a8:	2c 01       	movw	r4, r24
 8aa:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ac:	20 68       	ori	r18, 0x80	; 128
 8ae:	22 2e       	mov	r2, r18
 8b0:	83 01       	movw	r16, r6
 8b2:	23 fc       	sbrc	r2, 3
 8b4:	1b c0       	rjmp	.+54     	; 0x8ec <__stack+0x8d>
 8b6:	83 2d       	mov	r24, r3
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	48 16       	cp	r4, r24
 8bc:	59 06       	cpc	r5, r25
 8be:	b0 f4       	brcc	.+44     	; 0x8ec <__stack+0x8d>
 8c0:	b7 01       	movw	r22, r14
 8c2:	80 e2       	ldi	r24, 0x20	; 32
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 89 05 	call	0xb12	; 0xb12 <fputc>
 8ca:	3a 94       	dec	r3
 8cc:	f4 cf       	rjmp	.-24     	; 0x8b6 <__stack+0x57>
 8ce:	f5 01       	movw	r30, r10
 8d0:	27 fc       	sbrc	r2, 7
 8d2:	85 91       	lpm	r24, Z+
 8d4:	27 fe       	sbrs	r2, 7
 8d6:	81 91       	ld	r24, Z+
 8d8:	5f 01       	movw	r10, r30
 8da:	b7 01       	movw	r22, r14
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 89 05 	call	0xb12	; 0xb12 <fputc>
 8e2:	31 10       	cpse	r3, r1
 8e4:	3a 94       	dec	r3
 8e6:	f1 e0       	ldi	r31, 0x01	; 1
 8e8:	4f 1a       	sub	r4, r31
 8ea:	51 08       	sbc	r5, r1
 8ec:	41 14       	cp	r4, r1
 8ee:	51 04       	cpc	r5, r1
 8f0:	71 f7       	brne	.-36     	; 0x8ce <__stack+0x6f>
 8f2:	e5 c0       	rjmp	.+458    	; 0xabe <__stack+0x25f>
 8f4:	84 36       	cpi	r24, 0x64	; 100
 8f6:	11 f0       	breq	.+4      	; 0x8fc <__stack+0x9d>
 8f8:	89 36       	cpi	r24, 0x69	; 105
 8fa:	39 f5       	brne	.+78     	; 0x94a <__stack+0xeb>
 8fc:	f8 01       	movw	r30, r16
 8fe:	27 ff       	sbrs	r18, 7
 900:	07 c0       	rjmp	.+14     	; 0x910 <__stack+0xb1>
 902:	60 81       	ld	r22, Z
 904:	71 81       	ldd	r23, Z+1	; 0x01
 906:	82 81       	ldd	r24, Z+2	; 0x02
 908:	93 81       	ldd	r25, Z+3	; 0x03
 90a:	0c 5f       	subi	r16, 0xFC	; 252
 90c:	1f 4f       	sbci	r17, 0xFF	; 255
 90e:	08 c0       	rjmp	.+16     	; 0x920 <__stack+0xc1>
 910:	60 81       	ld	r22, Z
 912:	71 81       	ldd	r23, Z+1	; 0x01
 914:	07 2e       	mov	r0, r23
 916:	00 0c       	add	r0, r0
 918:	88 0b       	sbc	r24, r24
 91a:	99 0b       	sbc	r25, r25
 91c:	0e 5f       	subi	r16, 0xFE	; 254
 91e:	1f 4f       	sbci	r17, 0xFF	; 255
 920:	2f 76       	andi	r18, 0x6F	; 111
 922:	72 2e       	mov	r7, r18
 924:	97 ff       	sbrs	r25, 7
 926:	09 c0       	rjmp	.+18     	; 0x93a <__stack+0xdb>
 928:	90 95       	com	r25
 92a:	80 95       	com	r24
 92c:	70 95       	com	r23
 92e:	61 95       	neg	r22
 930:	7f 4f       	sbci	r23, 0xFF	; 255
 932:	8f 4f       	sbci	r24, 0xFF	; 255
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	20 68       	ori	r18, 0x80	; 128
 938:	72 2e       	mov	r7, r18
 93a:	2a e0       	ldi	r18, 0x0A	; 10
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	a4 01       	movw	r20, r8
 940:	0e 94 c1 05 	call	0xb82	; 0xb82 <__ultoa_invert>
 944:	a8 2e       	mov	r10, r24
 946:	a8 18       	sub	r10, r8
 948:	44 c0       	rjmp	.+136    	; 0x9d2 <__stack+0x173>
 94a:	85 37       	cpi	r24, 0x75	; 117
 94c:	29 f4       	brne	.+10     	; 0x958 <__stack+0xf9>
 94e:	2f 7e       	andi	r18, 0xEF	; 239
 950:	b2 2e       	mov	r11, r18
 952:	2a e0       	ldi	r18, 0x0A	; 10
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	25 c0       	rjmp	.+74     	; 0x9a2 <__stack+0x143>
 958:	f2 2f       	mov	r31, r18
 95a:	f9 7f       	andi	r31, 0xF9	; 249
 95c:	bf 2e       	mov	r11, r31
 95e:	8f 36       	cpi	r24, 0x6F	; 111
 960:	c1 f0       	breq	.+48     	; 0x992 <__stack+0x133>
 962:	18 f4       	brcc	.+6      	; 0x96a <__stack+0x10b>
 964:	88 35       	cpi	r24, 0x58	; 88
 966:	79 f0       	breq	.+30     	; 0x986 <__stack+0x127>
 968:	b4 c0       	rjmp	.+360    	; 0xad2 <__stack+0x273>
 96a:	80 37       	cpi	r24, 0x70	; 112
 96c:	19 f0       	breq	.+6      	; 0x974 <__stack+0x115>
 96e:	88 37       	cpi	r24, 0x78	; 120
 970:	21 f0       	breq	.+8      	; 0x97a <__stack+0x11b>
 972:	af c0       	rjmp	.+350    	; 0xad2 <__stack+0x273>
 974:	2f 2f       	mov	r18, r31
 976:	20 61       	ori	r18, 0x10	; 16
 978:	b2 2e       	mov	r11, r18
 97a:	b4 fe       	sbrs	r11, 4
 97c:	0d c0       	rjmp	.+26     	; 0x998 <__stack+0x139>
 97e:	8b 2d       	mov	r24, r11
 980:	84 60       	ori	r24, 0x04	; 4
 982:	b8 2e       	mov	r11, r24
 984:	09 c0       	rjmp	.+18     	; 0x998 <__stack+0x139>
 986:	24 ff       	sbrs	r18, 4
 988:	0a c0       	rjmp	.+20     	; 0x99e <__stack+0x13f>
 98a:	9f 2f       	mov	r25, r31
 98c:	96 60       	ori	r25, 0x06	; 6
 98e:	b9 2e       	mov	r11, r25
 990:	06 c0       	rjmp	.+12     	; 0x99e <__stack+0x13f>
 992:	28 e0       	ldi	r18, 0x08	; 8
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	05 c0       	rjmp	.+10     	; 0x9a2 <__stack+0x143>
 998:	20 e1       	ldi	r18, 0x10	; 16
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0x143>
 99e:	20 e1       	ldi	r18, 0x10	; 16
 9a0:	32 e0       	ldi	r19, 0x02	; 2
 9a2:	f8 01       	movw	r30, r16
 9a4:	b7 fe       	sbrs	r11, 7
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__stack+0x157>
 9a8:	60 81       	ld	r22, Z
 9aa:	71 81       	ldd	r23, Z+1	; 0x01
 9ac:	82 81       	ldd	r24, Z+2	; 0x02
 9ae:	93 81       	ldd	r25, Z+3	; 0x03
 9b0:	0c 5f       	subi	r16, 0xFC	; 252
 9b2:	1f 4f       	sbci	r17, 0xFF	; 255
 9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <__stack+0x163>
 9b6:	60 81       	ld	r22, Z
 9b8:	71 81       	ldd	r23, Z+1	; 0x01
 9ba:	80 e0       	ldi	r24, 0x00	; 0
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 5f       	subi	r16, 0xFE	; 254
 9c0:	1f 4f       	sbci	r17, 0xFF	; 255
 9c2:	a4 01       	movw	r20, r8
 9c4:	0e 94 c1 05 	call	0xb82	; 0xb82 <__ultoa_invert>
 9c8:	a8 2e       	mov	r10, r24
 9ca:	a8 18       	sub	r10, r8
 9cc:	fb 2d       	mov	r31, r11
 9ce:	ff 77       	andi	r31, 0x7F	; 127
 9d0:	7f 2e       	mov	r7, r31
 9d2:	76 fe       	sbrs	r7, 6
 9d4:	0b c0       	rjmp	.+22     	; 0x9ec <__stack+0x18d>
 9d6:	37 2d       	mov	r19, r7
 9d8:	3e 7f       	andi	r19, 0xFE	; 254
 9da:	a5 14       	cp	r10, r5
 9dc:	50 f4       	brcc	.+20     	; 0x9f2 <__stack+0x193>
 9de:	74 fe       	sbrs	r7, 4
 9e0:	0a c0       	rjmp	.+20     	; 0x9f6 <__stack+0x197>
 9e2:	72 fc       	sbrc	r7, 2
 9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <__stack+0x197>
 9e6:	37 2d       	mov	r19, r7
 9e8:	3e 7e       	andi	r19, 0xEE	; 238
 9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__stack+0x197>
 9ec:	ba 2c       	mov	r11, r10
 9ee:	37 2d       	mov	r19, r7
 9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <__stack+0x199>
 9f2:	ba 2c       	mov	r11, r10
 9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <__stack+0x199>
 9f6:	b5 2c       	mov	r11, r5
 9f8:	34 ff       	sbrs	r19, 4
 9fa:	0d c0       	rjmp	.+26     	; 0xa16 <__stack+0x1b7>
 9fc:	fe 01       	movw	r30, r28
 9fe:	ea 0d       	add	r30, r10
 a00:	f1 1d       	adc	r31, r1
 a02:	80 81       	ld	r24, Z
 a04:	80 33       	cpi	r24, 0x30	; 48
 a06:	11 f4       	brne	.+4      	; 0xa0c <__stack+0x1ad>
 a08:	39 7e       	andi	r19, 0xE9	; 233
 a0a:	09 c0       	rjmp	.+18     	; 0xa1e <__stack+0x1bf>
 a0c:	32 ff       	sbrs	r19, 2
 a0e:	06 c0       	rjmp	.+12     	; 0xa1c <__stack+0x1bd>
 a10:	b3 94       	inc	r11
 a12:	b3 94       	inc	r11
 a14:	04 c0       	rjmp	.+8      	; 0xa1e <__stack+0x1bf>
 a16:	83 2f       	mov	r24, r19
 a18:	86 78       	andi	r24, 0x86	; 134
 a1a:	09 f0       	breq	.+2      	; 0xa1e <__stack+0x1bf>
 a1c:	b3 94       	inc	r11
 a1e:	33 fd       	sbrc	r19, 3
 a20:	13 c0       	rjmp	.+38     	; 0xa48 <__stack+0x1e9>
 a22:	30 ff       	sbrs	r19, 0
 a24:	06 c0       	rjmp	.+12     	; 0xa32 <__stack+0x1d3>
 a26:	5a 2c       	mov	r5, r10
 a28:	b3 14       	cp	r11, r3
 a2a:	18 f4       	brcc	.+6      	; 0xa32 <__stack+0x1d3>
 a2c:	53 0c       	add	r5, r3
 a2e:	5b 18       	sub	r5, r11
 a30:	b3 2c       	mov	r11, r3
 a32:	b3 14       	cp	r11, r3
 a34:	68 f4       	brcc	.+26     	; 0xa50 <__stack+0x1f1>
 a36:	b7 01       	movw	r22, r14
 a38:	80 e2       	ldi	r24, 0x20	; 32
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	3c 87       	std	Y+12, r19	; 0x0c
 a3e:	0e 94 89 05 	call	0xb12	; 0xb12 <fputc>
 a42:	b3 94       	inc	r11
 a44:	3c 85       	ldd	r19, Y+12	; 0x0c
 a46:	f5 cf       	rjmp	.-22     	; 0xa32 <__stack+0x1d3>
 a48:	b3 14       	cp	r11, r3
 a4a:	10 f4       	brcc	.+4      	; 0xa50 <__stack+0x1f1>
 a4c:	3b 18       	sub	r3, r11
 a4e:	01 c0       	rjmp	.+2      	; 0xa52 <__stack+0x1f3>
 a50:	31 2c       	mov	r3, r1
 a52:	34 ff       	sbrs	r19, 4
 a54:	12 c0       	rjmp	.+36     	; 0xa7a <__stack+0x21b>
 a56:	b7 01       	movw	r22, r14
 a58:	80 e3       	ldi	r24, 0x30	; 48
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	3c 87       	std	Y+12, r19	; 0x0c
 a5e:	0e 94 89 05 	call	0xb12	; 0xb12 <fputc>
 a62:	3c 85       	ldd	r19, Y+12	; 0x0c
 a64:	32 ff       	sbrs	r19, 2
 a66:	17 c0       	rjmp	.+46     	; 0xa96 <__stack+0x237>
 a68:	31 fd       	sbrc	r19, 1
 a6a:	03 c0       	rjmp	.+6      	; 0xa72 <__stack+0x213>
 a6c:	88 e7       	ldi	r24, 0x78	; 120
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <__stack+0x217>
 a72:	88 e5       	ldi	r24, 0x58	; 88
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	b7 01       	movw	r22, r14
 a78:	0c c0       	rjmp	.+24     	; 0xa92 <__stack+0x233>
 a7a:	83 2f       	mov	r24, r19
 a7c:	86 78       	andi	r24, 0x86	; 134
 a7e:	59 f0       	breq	.+22     	; 0xa96 <__stack+0x237>
 a80:	31 ff       	sbrs	r19, 1
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <__stack+0x229>
 a84:	8b e2       	ldi	r24, 0x2B	; 43
 a86:	01 c0       	rjmp	.+2      	; 0xa8a <__stack+0x22b>
 a88:	80 e2       	ldi	r24, 0x20	; 32
 a8a:	37 fd       	sbrc	r19, 7
 a8c:	8d e2       	ldi	r24, 0x2D	; 45
 a8e:	b7 01       	movw	r22, r14
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 89 05 	call	0xb12	; 0xb12 <fputc>
 a96:	a5 14       	cp	r10, r5
 a98:	38 f4       	brcc	.+14     	; 0xaa8 <__stack+0x249>
 a9a:	b7 01       	movw	r22, r14
 a9c:	80 e3       	ldi	r24, 0x30	; 48
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	0e 94 89 05 	call	0xb12	; 0xb12 <fputc>
 aa4:	5a 94       	dec	r5
 aa6:	f7 cf       	rjmp	.-18     	; 0xa96 <__stack+0x237>
 aa8:	aa 94       	dec	r10
 aaa:	f4 01       	movw	r30, r8
 aac:	ea 0d       	add	r30, r10
 aae:	f1 1d       	adc	r31, r1
 ab0:	80 81       	ld	r24, Z
 ab2:	b7 01       	movw	r22, r14
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 94 89 05 	call	0xb12	; 0xb12 <fputc>
 aba:	a1 10       	cpse	r10, r1
 abc:	f5 cf       	rjmp	.-22     	; 0xaa8 <__stack+0x249>
 abe:	33 20       	and	r3, r3
 ac0:	09 f4       	brne	.+2      	; 0xac4 <__stack+0x265>
 ac2:	51 ce       	rjmp	.-862    	; 0x766 <vfprintf+0x24>
 ac4:	b7 01       	movw	r22, r14
 ac6:	80 e2       	ldi	r24, 0x20	; 32
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 89 05 	call	0xb12	; 0xb12 <fputc>
 ace:	3a 94       	dec	r3
 ad0:	f6 cf       	rjmp	.-20     	; 0xabe <__stack+0x25f>
 ad2:	f7 01       	movw	r30, r14
 ad4:	86 81       	ldd	r24, Z+6	; 0x06
 ad6:	97 81       	ldd	r25, Z+7	; 0x07
 ad8:	02 c0       	rjmp	.+4      	; 0xade <__stack+0x27f>
 ada:	8f ef       	ldi	r24, 0xFF	; 255
 adc:	9f ef       	ldi	r25, 0xFF	; 255
 ade:	2c 96       	adiw	r28, 0x0c	; 12
 ae0:	e2 e1       	ldi	r30, 0x12	; 18
 ae2:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__epilogue_restores__>

00000ae6 <strnlen_P>:
 ae6:	fc 01       	movw	r30, r24
 ae8:	05 90       	lpm	r0, Z+
 aea:	61 50       	subi	r22, 0x01	; 1
 aec:	70 40       	sbci	r23, 0x00	; 0
 aee:	01 10       	cpse	r0, r1
 af0:	d8 f7       	brcc	.-10     	; 0xae8 <strnlen_P+0x2>
 af2:	80 95       	com	r24
 af4:	90 95       	com	r25
 af6:	8e 0f       	add	r24, r30
 af8:	9f 1f       	adc	r25, r31
 afa:	08 95       	ret

00000afc <strnlen>:
 afc:	fc 01       	movw	r30, r24
 afe:	61 50       	subi	r22, 0x01	; 1
 b00:	70 40       	sbci	r23, 0x00	; 0
 b02:	01 90       	ld	r0, Z+
 b04:	01 10       	cpse	r0, r1
 b06:	d8 f7       	brcc	.-10     	; 0xafe <strnlen+0x2>
 b08:	80 95       	com	r24
 b0a:	90 95       	com	r25
 b0c:	8e 0f       	add	r24, r30
 b0e:	9f 1f       	adc	r25, r31
 b10:	08 95       	ret

00000b12 <fputc>:
 b12:	0f 93       	push	r16
 b14:	1f 93       	push	r17
 b16:	cf 93       	push	r28
 b18:	df 93       	push	r29
 b1a:	fb 01       	movw	r30, r22
 b1c:	23 81       	ldd	r18, Z+3	; 0x03
 b1e:	21 fd       	sbrc	r18, 1
 b20:	03 c0       	rjmp	.+6      	; 0xb28 <fputc+0x16>
 b22:	8f ef       	ldi	r24, 0xFF	; 255
 b24:	9f ef       	ldi	r25, 0xFF	; 255
 b26:	28 c0       	rjmp	.+80     	; 0xb78 <fputc+0x66>
 b28:	22 ff       	sbrs	r18, 2
 b2a:	16 c0       	rjmp	.+44     	; 0xb58 <fputc+0x46>
 b2c:	46 81       	ldd	r20, Z+6	; 0x06
 b2e:	57 81       	ldd	r21, Z+7	; 0x07
 b30:	24 81       	ldd	r18, Z+4	; 0x04
 b32:	35 81       	ldd	r19, Z+5	; 0x05
 b34:	42 17       	cp	r20, r18
 b36:	53 07       	cpc	r21, r19
 b38:	44 f4       	brge	.+16     	; 0xb4a <fputc+0x38>
 b3a:	a0 81       	ld	r26, Z
 b3c:	b1 81       	ldd	r27, Z+1	; 0x01
 b3e:	9d 01       	movw	r18, r26
 b40:	2f 5f       	subi	r18, 0xFF	; 255
 b42:	3f 4f       	sbci	r19, 0xFF	; 255
 b44:	31 83       	std	Z+1, r19	; 0x01
 b46:	20 83       	st	Z, r18
 b48:	8c 93       	st	X, r24
 b4a:	26 81       	ldd	r18, Z+6	; 0x06
 b4c:	37 81       	ldd	r19, Z+7	; 0x07
 b4e:	2f 5f       	subi	r18, 0xFF	; 255
 b50:	3f 4f       	sbci	r19, 0xFF	; 255
 b52:	37 83       	std	Z+7, r19	; 0x07
 b54:	26 83       	std	Z+6, r18	; 0x06
 b56:	10 c0       	rjmp	.+32     	; 0xb78 <fputc+0x66>
 b58:	eb 01       	movw	r28, r22
 b5a:	09 2f       	mov	r16, r25
 b5c:	18 2f       	mov	r17, r24
 b5e:	00 84       	ldd	r0, Z+8	; 0x08
 b60:	f1 85       	ldd	r31, Z+9	; 0x09
 b62:	e0 2d       	mov	r30, r0
 b64:	09 95       	icall
 b66:	89 2b       	or	r24, r25
 b68:	e1 f6       	brne	.-72     	; 0xb22 <fputc+0x10>
 b6a:	8e 81       	ldd	r24, Y+6	; 0x06
 b6c:	9f 81       	ldd	r25, Y+7	; 0x07
 b6e:	01 96       	adiw	r24, 0x01	; 1
 b70:	9f 83       	std	Y+7, r25	; 0x07
 b72:	8e 83       	std	Y+6, r24	; 0x06
 b74:	81 2f       	mov	r24, r17
 b76:	90 2f       	mov	r25, r16
 b78:	df 91       	pop	r29
 b7a:	cf 91       	pop	r28
 b7c:	1f 91       	pop	r17
 b7e:	0f 91       	pop	r16
 b80:	08 95       	ret

00000b82 <__ultoa_invert>:
 b82:	fa 01       	movw	r30, r20
 b84:	aa 27       	eor	r26, r26
 b86:	28 30       	cpi	r18, 0x08	; 8
 b88:	51 f1       	breq	.+84     	; 0xbde <__ultoa_invert+0x5c>
 b8a:	20 31       	cpi	r18, 0x10	; 16
 b8c:	81 f1       	breq	.+96     	; 0xbee <__ultoa_invert+0x6c>
 b8e:	e8 94       	clt
 b90:	6f 93       	push	r22
 b92:	6e 7f       	andi	r22, 0xFE	; 254
 b94:	6e 5f       	subi	r22, 0xFE	; 254
 b96:	7f 4f       	sbci	r23, 0xFF	; 255
 b98:	8f 4f       	sbci	r24, 0xFF	; 255
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	af 4f       	sbci	r26, 0xFF	; 255
 b9e:	b1 e0       	ldi	r27, 0x01	; 1
 ba0:	3e d0       	rcall	.+124    	; 0xc1e <__ultoa_invert+0x9c>
 ba2:	b4 e0       	ldi	r27, 0x04	; 4
 ba4:	3c d0       	rcall	.+120    	; 0xc1e <__ultoa_invert+0x9c>
 ba6:	67 0f       	add	r22, r23
 ba8:	78 1f       	adc	r23, r24
 baa:	89 1f       	adc	r24, r25
 bac:	9a 1f       	adc	r25, r26
 bae:	a1 1d       	adc	r26, r1
 bb0:	68 0f       	add	r22, r24
 bb2:	79 1f       	adc	r23, r25
 bb4:	8a 1f       	adc	r24, r26
 bb6:	91 1d       	adc	r25, r1
 bb8:	a1 1d       	adc	r26, r1
 bba:	6a 0f       	add	r22, r26
 bbc:	71 1d       	adc	r23, r1
 bbe:	81 1d       	adc	r24, r1
 bc0:	91 1d       	adc	r25, r1
 bc2:	a1 1d       	adc	r26, r1
 bc4:	20 d0       	rcall	.+64     	; 0xc06 <__ultoa_invert+0x84>
 bc6:	09 f4       	brne	.+2      	; 0xbca <__ultoa_invert+0x48>
 bc8:	68 94       	set
 bca:	3f 91       	pop	r19
 bcc:	2a e0       	ldi	r18, 0x0A	; 10
 bce:	26 9f       	mul	r18, r22
 bd0:	11 24       	eor	r1, r1
 bd2:	30 19       	sub	r19, r0
 bd4:	30 5d       	subi	r19, 0xD0	; 208
 bd6:	31 93       	st	Z+, r19
 bd8:	de f6       	brtc	.-74     	; 0xb90 <__ultoa_invert+0xe>
 bda:	cf 01       	movw	r24, r30
 bdc:	08 95       	ret
 bde:	46 2f       	mov	r20, r22
 be0:	47 70       	andi	r20, 0x07	; 7
 be2:	40 5d       	subi	r20, 0xD0	; 208
 be4:	41 93       	st	Z+, r20
 be6:	b3 e0       	ldi	r27, 0x03	; 3
 be8:	0f d0       	rcall	.+30     	; 0xc08 <__ultoa_invert+0x86>
 bea:	c9 f7       	brne	.-14     	; 0xbde <__ultoa_invert+0x5c>
 bec:	f6 cf       	rjmp	.-20     	; 0xbda <__ultoa_invert+0x58>
 bee:	46 2f       	mov	r20, r22
 bf0:	4f 70       	andi	r20, 0x0F	; 15
 bf2:	40 5d       	subi	r20, 0xD0	; 208
 bf4:	4a 33       	cpi	r20, 0x3A	; 58
 bf6:	18 f0       	brcs	.+6      	; 0xbfe <__ultoa_invert+0x7c>
 bf8:	49 5d       	subi	r20, 0xD9	; 217
 bfa:	31 fd       	sbrc	r19, 1
 bfc:	40 52       	subi	r20, 0x20	; 32
 bfe:	41 93       	st	Z+, r20
 c00:	02 d0       	rcall	.+4      	; 0xc06 <__ultoa_invert+0x84>
 c02:	a9 f7       	brne	.-22     	; 0xbee <__ultoa_invert+0x6c>
 c04:	ea cf       	rjmp	.-44     	; 0xbda <__ultoa_invert+0x58>
 c06:	b4 e0       	ldi	r27, 0x04	; 4
 c08:	a6 95       	lsr	r26
 c0a:	97 95       	ror	r25
 c0c:	87 95       	ror	r24
 c0e:	77 95       	ror	r23
 c10:	67 95       	ror	r22
 c12:	ba 95       	dec	r27
 c14:	c9 f7       	brne	.-14     	; 0xc08 <__ultoa_invert+0x86>
 c16:	00 97       	sbiw	r24, 0x00	; 0
 c18:	61 05       	cpc	r22, r1
 c1a:	71 05       	cpc	r23, r1
 c1c:	08 95       	ret
 c1e:	9b 01       	movw	r18, r22
 c20:	ac 01       	movw	r20, r24
 c22:	0a 2e       	mov	r0, r26
 c24:	06 94       	lsr	r0
 c26:	57 95       	ror	r21
 c28:	47 95       	ror	r20
 c2a:	37 95       	ror	r19
 c2c:	27 95       	ror	r18
 c2e:	ba 95       	dec	r27
 c30:	c9 f7       	brne	.-14     	; 0xc24 <__ultoa_invert+0xa2>
 c32:	62 0f       	add	r22, r18
 c34:	73 1f       	adc	r23, r19
 c36:	84 1f       	adc	r24, r20
 c38:	95 1f       	adc	r25, r21
 c3a:	a0 1d       	adc	r26, r0
 c3c:	08 95       	ret

00000c3e <__prologue_saves__>:
 c3e:	2f 92       	push	r2
 c40:	3f 92       	push	r3
 c42:	4f 92       	push	r4
 c44:	5f 92       	push	r5
 c46:	6f 92       	push	r6
 c48:	7f 92       	push	r7
 c4a:	8f 92       	push	r8
 c4c:	9f 92       	push	r9
 c4e:	af 92       	push	r10
 c50:	bf 92       	push	r11
 c52:	cf 92       	push	r12
 c54:	df 92       	push	r13
 c56:	ef 92       	push	r14
 c58:	ff 92       	push	r15
 c5a:	0f 93       	push	r16
 c5c:	1f 93       	push	r17
 c5e:	cf 93       	push	r28
 c60:	df 93       	push	r29
 c62:	cd b7       	in	r28, 0x3d	; 61
 c64:	de b7       	in	r29, 0x3e	; 62
 c66:	ca 1b       	sub	r28, r26
 c68:	db 0b       	sbc	r29, r27
 c6a:	0f b6       	in	r0, 0x3f	; 63
 c6c:	f8 94       	cli
 c6e:	de bf       	out	0x3e, r29	; 62
 c70:	0f be       	out	0x3f, r0	; 63
 c72:	cd bf       	out	0x3d, r28	; 61
 c74:	09 94       	ijmp

00000c76 <__epilogue_restores__>:
 c76:	2a 88       	ldd	r2, Y+18	; 0x12
 c78:	39 88       	ldd	r3, Y+17	; 0x11
 c7a:	48 88       	ldd	r4, Y+16	; 0x10
 c7c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c7e:	6e 84       	ldd	r6, Y+14	; 0x0e
 c80:	7d 84       	ldd	r7, Y+13	; 0x0d
 c82:	8c 84       	ldd	r8, Y+12	; 0x0c
 c84:	9b 84       	ldd	r9, Y+11	; 0x0b
 c86:	aa 84       	ldd	r10, Y+10	; 0x0a
 c88:	b9 84       	ldd	r11, Y+9	; 0x09
 c8a:	c8 84       	ldd	r12, Y+8	; 0x08
 c8c:	df 80       	ldd	r13, Y+7	; 0x07
 c8e:	ee 80       	ldd	r14, Y+6	; 0x06
 c90:	fd 80       	ldd	r15, Y+5	; 0x05
 c92:	0c 81       	ldd	r16, Y+4	; 0x04
 c94:	1b 81       	ldd	r17, Y+3	; 0x03
 c96:	aa 81       	ldd	r26, Y+2	; 0x02
 c98:	b9 81       	ldd	r27, Y+1	; 0x01
 c9a:	ce 0f       	add	r28, r30
 c9c:	d1 1d       	adc	r29, r1
 c9e:	0f b6       	in	r0, 0x3f	; 63
 ca0:	f8 94       	cli
 ca2:	de bf       	out	0x3e, r29	; 62
 ca4:	0f be       	out	0x3f, r0	; 63
 ca6:	cd bf       	out	0x3d, r28	; 61
 ca8:	ed 01       	movw	r28, r26
 caa:	08 95       	ret

00000cac <_exit>:
 cac:	f8 94       	cli

00000cae <__stop_program>:
 cae:	ff cf       	rjmp	.-2      	; 0xcae <__stop_program>
